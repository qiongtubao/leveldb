// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <cstddef>

#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kNoCompression = 0x0,
  kSnappyCompression = 0x1
};

// Options to control the behavior of a database (passed to DB::Open)
struct LEVELDB_EXPORT Options {
  // Create an Options object with default values for all fields.
  Options();

  // -------------------
  // Parameters that affect behavior

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  //比较器
  const Comparator* comparator;

  // If true, the database will be created if it is missing.
  //设置true 表示数据库不存在的时候 调用Open方法则创建新的数据库
  bool create_if_missing = false;

  // If true, an error is raised if the database already exists.
  //设置true 进行Open操作时 先判断数据库是否存在，存在则触发一个错误
  bool error_if_exists = false;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  //设置true 将会对数据进行大量的检测工作，如果检测到任何错误，则停止检测，这样会造成某些不可预见的错误。比如一个数据实体的错误将导致大量的数据实体不可读
  bool paranoid_checks = false;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  //环境变量 （系统环境的交互  默认是Env::Default()）
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  // 如果为NULL 则将这些信息存储在与DB相同路径下的目录
  // 如果不为NULL 运行时产生的中间过程或错误信息会写入到info_log中
  Logger* info_log = nullptr;

  // -------------------
  // Parameters that affect performance

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  // 内存中将要写入到硬盘文件 的数据量大小默认是4MB 该参数增大 则会提升性能 特别是在大量加载的场景中
  // 内存中最多同时保存2个写缓存， 此外，写缓存越大，则DB在下次打开过程中恢复的时间越长
  size_t write_buffer_size = 4 * 1024 * 1024;

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  // DB所能使用的最大打开文件数 如果在应用场景中有一个大的数据集。则可以增大该参数。该参数默认为1000
  int max_open_files = 1000;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).

  // If non-null, use the specified cache for blocks.
  // If null, leveldb will automatically create and use an 8MB internal cache.
  // block是从硬盘上读数据的单位，用户的数据就存储在许多block中。默认为NULL，LevelDB自动创建并使用8MB的缓存。
  // 如果不为空 则由用户指定相对应的block缓存
  Cache* block_cache = nullptr;

  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  // 用户数据每一个block的大小 默认为4KB block size参数针对的是没有压缩的数据。
  // 如果使用了压缩功能 则实际每个单位block从硬盘中读取的数据大小可能会较小 （这个参数可以进行动态修改）
  size_t block_size = 4 * 1024;

  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  //主要用于表示重启点间key的个数
  int block_restart_interval = 16;

  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  // 默认为2MB 指定LevelDb向一个文件写入字节的最大值。一般用户不需要关注这个参数。
  // 然而，如果用户的文件系统可以支持大的文件
  // 可以考虑增大该参数值 但增大该参数，会增加压缩与等待间隔的时间
  // 如果你本身就需要操作一个大数据库。也可以适当增大该参数值
  size_t max_file_size = 2 * 1024 * 1024;

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  // 采用特定的压缩算法 对block进行压缩 这个参数可以进行动态修改
  // 枚举型的 目前该枚举类型只有两种值 
  // kNoCompression kSnappyCompression(默认)
  // 从实际应用上来看,Snappy的压缩速度可显著快于目前磁盘的存储速度
  // Snappy的压缩速度可显著快于目前磁盘的存储速度 因此一般情况下应该开启压缩模式 
  // 如果输入数据不可压缩,Snappy也可以有效的检测并转换到非压缩模型
  CompressionType compression = kSnappyCompression;

  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  //
  // Default: currently false, but may become true later.
  // 如果reuse_logs为true, 将会继续利用已有的Manifest和Log文件进行添加，从而加速数据库的Open操作
  bool reuse_logs = false;

  // If non-null, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  // 默认为NULL 如果不为NULL 用户可以指定相应的过滤策略，以减少磁盘读取次数
  const FilterPolicy* filter_policy = nullptr;
};

// Options that control read operations
struct LEVELDB_EXPORT ReadOptions {
  ReadOptions() = default;

  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  // 如果设置true 那么当读数据时,会对数据的校验和进行验证，从而保证数据的一致性
  bool verify_checksums = false;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  //默认true 表示在迭代器读取数据时是否将数据缓存在内存中.
  // 如果是进行块的扫描 一般可以将该参数设为false
  bool fill_cache = true;

  // If "snapshot" is non-null, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is null, use an implicit
  // snapshot of the state at the beginning of this read operation.
  // 默认NULL， 如果该参数不为NULL，则会从当前已有的快照中开始读
  // 如果为NULL 在读操作的开始阶段，将会采用一个隐式的状态快照
  const Snapshot* snapshot = nullptr;
};

// Options that control write operations
struct LEVELDB_EXPORT WriteOptions {
  WriteOptions() = default;

  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  // 该参数主要是为了指定调用write方法进行写文件操作时,是否将操作系统缓存区的内容实时同步写入硬盘中。
  // 默认false 因为当宕机发生时，一些写操作必然写入不成功，从而造成数据丢失
  // 设置true 相当于在write函数操作后调用fsync函数 从而在写操作完成之前 将缓存区的数据强制同步持久化 （设置为true会变慢）
  bool sync = false;
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
